from snakemake.utils import min_version
min_version("4.4.0")

# Written by Hanna Sigeman, Nov 2019

dir_path = os.getcwd()

##########################################################
######################## PATHS ###########################
##########################################################

ID = config["samples"]
SPECIES = config["species"]
HETEROGAMETIC = config["heterogametic"]
HOMOGAMETIC = config["homogametic"]
FQ_DIR = config["fastq"]
REF_DIR = config["ref_dir"]
REF_NAME = config["ref_name"]
CHROMOSOMES = config["chr_file"]
CHROMOSOMES_HIGHLIGHT = config["chr_highlight_file"]
PREFIX = SPECIES + "_ref_" + REF_NAME

REF_PATH = REF_DIR + REF_NAME
REF_FASTA = REF_DIR + REF_NAME + ".fasta"
MAP_DIR = "intermediate/bwa/" + REF_NAME + "/"
GENCOV_DIR = "intermediate/bedtools/" + PREFIX + "/"
GENCOV_DIR_REF = "intermediate/bedtools/" + REF_NAME + "/"
VCF_DIR = "intermediate/freebayes/" + PREFIX + "/"
VCF_DIR_REF = "intermediate/freebayes/" + REF_NAME + "/"
MATCHDIR = "intermediate/synteny_match/" + PREFIX + "/"
RESULTDIR = "results/" + PREFIX + "/"

SYNTENY_SPECIES = config["synteny_species"]
COMP_GEN_SYNS = "intermediate/lastal_" + SYNTENY_SPECIES + "/" + REF_NAME + "/"
SYNS_DB = config["synteny_dir"]

EDIT_DIST = config["edit_distance"]
MIN_SIZE_SCAFFOLD = config["minSizeScaffold"]

##########################################################
######################## RULES ###########################
##########################################################

rule all:
    input:
        REF_FASTA + ".bwt",
        REF_FASTA + ".fai" ,
        expand(MAP_DIR + "{S}.sorted.nodup.nm.{ED}.bam.bai", S = ID, ED = EDIT_DIST),
        expand(MAP_DIR + "{S}.sorted.nodup.nm.{ED}.stats", S = ID, ED = EDIT_DIST),
        expand(MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.nodup.nm.{ED}.norm.sexAverage.small.out", ED = EDIT_DIST),
#        expand(MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.nodup.nm.{ED}.out.norm", ED = EDIT_DIST),
        expand(RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov_heterozygosity_indv.{ED}.pdf", ED = EDIT_DIST),
        RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.plotting.1Mbp.done",
        RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.plotting.100kbp.done",
        RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".plotting_chr.done",
        RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.plotting.linear.1Mbp.done",
        RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.plotting.linear.100kbp.done"
        
##########################################################
################### INCLUDE SNAKEFILE ####################
##########################################################

include: "snakefile"

##########################################################
#################### SYNTENY ANALYSIS ####################
##########################################################

rule fasta_formatter:
    input:
        REF_FASTA
    output:
        REF_PATH + "wrap.fasta"
    threads: 1
    shell:
        """
        fasta_formatter -i {input} -w 80 -o {output}
        """

rule lastal_syns:
    input:
        REF_PATH + "wrap.fasta"
    output:
        COMP_GEN_SYNS + REF_NAME + "_align"
    params:
        db = SYNS_DB
    threads: 15
    shell:
        """
        lastal {params.db} {input} -P 15 | last-split > {output}
        """

rule maf_convert_syns:
    input:
        COMP_GEN_SYNS + REF_NAME + "_align"
    output:
        COMP_GEN_SYNS + REF_NAME + "_align_converted"
    threads: 1
    shell:
        """
        maf-convert psl {input} > {output}
        """

##########################################################
################### MATCHING DATASETS ####################
##########################################################

rule matchScaffold2Chr:
    input:
        syns = COMP_GEN_SYNS + REF_NAME + "_align_converted",
        gencov = GENCOV_DIR_REF + "genome_5kb_windows.out"
    output:
        windows = COMP_GEN_SYNS  + "genome_windows.out",
        bestMatch = COMP_GEN_SYNS + "bestMatch.list",
        log = COMP_GEN_SYNS + "bestMatch.status"
    params:
        abswindow = dir_path + "/" + COMP_GEN_SYNS  + "genome_windows.out",
        absBestMatch = dir_path + "/" + COMP_GEN_SYNS + "bestMatch.unfilter.list",
        okWindows = dir_path + "/" + COMP_GEN_SYNS + "okWindows.list",
        absBestMatchFilter = dir_path + "/" + COMP_GEN_SYNS + "bestMatch.list",
        windowsfile = "genome_windows.out",
        absLog = dir_path + "/" + COMP_GEN_SYNS + "bestMatch.status"
    shell:
        """
        cat {input.syns} | awk '{{print $10,$12,$13,$14,$16,$17,$1}}' | sed 's/ /\t/g' | bedtools intersect -a stdin -b {input.gencov} -wa -wb | awk '{{if($10-$9==\"5000\") print $8,$9,$10,$7,$1,$2,$3,$4,$5,$6}}' | sed 's/ /\t/g' | sed 's/\t/STARTCOORD/' | sed 's/\t/ENDCOORD/' > {output.windows}

        sort -r -n -k2 < {output.windows} | awk '!x[$1]++' | sort -k1 | sed 's/STARTCOORD/\t/' | sed 's/ENDCOORD/\t/' > {params.absBestMatch}

        cat {params.absBestMatch} | cut -f 8-10 | sort | uniq -c | awk '$1<=2 {{print}}' | awk '{{print $2,$3,$4}}' | sed 's/ /\t/g' | sort | uniq | bedtools sort > {params.okWindows}

        bedtools intersect -a <(<{params.absBestMatch} awk '{{print $8,$9,$10,$0}}' | sed 's/ /\t/g' | sort -k1,1 | bedtools sort) -b {params.okWindows} -f 1 -r -wa | cut -f 4- | awk '$4>500 {{print}}'> {params.absBestMatchFilter}

        echo "DONE" > {params.absLog}
        """

#rule matchScaffold2Chr_snp_old:
#    input:
#        bestMatch = COMP_GEN_SYNS + "bestMatch.list",
#        het = VCF_DIR + SPECIES + ".heterozygosity.5kb.windows.mean.bed",
#        het_sexAverage = VCF_DIR + SPECIES + ".heterozygosity.sexAverage.bed"
#    output:
#        bestMatch = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".heterozygosity.bestMatch",
#        bestMatch_small = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES +".heterozygosity.bestMatch.small",
#        bestMatch_sexAverage = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".heterozygosity.bestMatch.sexAverage.bed",
#        bestMatch_small_sexAverage = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES +".heterozygosity.bestMatch.small.sexAverage.bed"
#    params:
#        hetero = expand("het:{heterogametic}", heterogametic = HETEROGAMETIC),
#        homo = expand("homo:{homogametic}", homogametic = HOMOGAMETIC)
#    threads: 1
#    shell:
#        """
#        bedtools intersect -a {input.bestMatch} -b {input.het} -wa -wb > {output.bestMatch}
#
#        cut -f 8,9,10,14- {output.bestMatch} > {output.bestMatch_small}
#        
#        bedtools intersect -a {input.bestMatch} -b {input.het_sexAverage} -wa -wb > {output.bestMatch_sexAverage}
#
#        cut -f 8,9,10,14- {output.bestMatch_sexAverage} > {output.bestMatch_small_sexAverage}
#        """

rule matchScaffold2Chr_snp:
    input:
        bestMatch = COMP_GEN_SYNS + "bestMatch.list",
        het = VCF_DIR + SPECIES + ".heterozygosity.5kb.windows.NR.bed",
        het_sexAverage = VCF_DIR + SPECIES + ".heterozygosity.sexAverage.NR.bed"
    output:
        bestMatch = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".heterozygosity.bestMatch",
        bestMatch_small = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES +".heterozygosity.bestMatch.small",
        bestMatch_sexAverage = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".heterozygosity.bestMatch.sexAverage.bed",
        bestMatch_small_sexAverage = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES +".heterozygosity.bestMatch.small.sexAverage.bed"
    params:
        hetero = expand("het:{heterogametic}", heterogametic = HETEROGAMETIC),
        homo = expand("homo:{homogametic}", homogametic = HOMOGAMETIC)
    threads: 1
    shell:
        """
        bedtools intersect -a {input.bestMatch} -b {input.het} -wa -wb > {output.bestMatch}

        cut -f 8,9,10,14- {output.bestMatch} > {output.bestMatch_small}
        
        bedtools intersect -a {input.bestMatch} -b {input.het_sexAverage} -wa -wb > {output.bestMatch_sexAverage}

        cut -f 8,9,10,14- {output.bestMatch_sexAverage} > {output.bestMatch_small_sexAverage}
        """


rule matchScaffold2Chr_cov:
    input:
        bestMatch = COMP_GEN_SYNS + "bestMatch.list",
        cov = GENCOV_DIR + SPECIES + ".gencov.nodup.nm.{ED}.out",
        cov_sexAverage = GENCOV_DIR + SPECIES + ".gencov.nodup.nm.{ED}.norm.sexAverage.out"
    output:
        bestMatch = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.nodup.nm.{ED}.out",
        bestMatch_small = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.nodup.nm.{ED}.small.out",
        bestMatch_sexAverage = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.nodup.nm.{ED}.norm.sexAverage.out",
        bestMatch_small_sexAverage = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.nodup.nm.{ED}.norm.sexAverage.small.out"
    params:
        hetero = expand("het:{heterogametic}", heterogametic = HETEROGAMETIC),
        homo = expand("homo:{homogametic}", homogametic = HOMOGAMETIC)
    threads: 1
    shell:
        """
        bedtools intersect -a {input.bestMatch} -b {input.cov} -wa -wb > {output.bestMatch}
        cut -f 8,9,10,14- {output.bestMatch} > {output.bestMatch_small}
        bedtools intersect -a {input.bestMatch} -b {input.cov_sexAverage} -wa -wb > {output.bestMatch_sexAverage}
        cut -f 8,9,10,14- {output.bestMatch_sexAverage} > {output.bestMatch_small_sexAverage}
        """

##########################################################
##################### CONFIRM SEXING #####################
##########################################################

rule confirm_sexing_synteny:
    input:
        gencov = MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.nodup.nm.{ED}.small.out",
        het =  MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".heterozygosity.bestMatch.small",
        stats = expand(MAP_DIR + "{S}.sorted.nodup.nm.{{ED}}.stats", S = ID)
    output:
        read_length = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".read_length.sorted.nodup.nm.{ED}.csv",
        gencov_het = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov_heterozygosity_indv.{ED}.pdf"
    threads: 1
    params:
        map_dir = MAP_DIR + "*.sorted.nodup.nm.{ED}.stats",
        hetero = expand("{heterogametic}", heterogametic = HETEROGAMETIC),
        homo = expand("{homogametic}", homogametic = HOMOGAMETIC),
        chromosomes = CHROMOSOMES
    threads: 1
    shell:
        """
        python code/read_length.py <(for FILE in $(ls {params.map_dir}); do echo \"${{FILE##*/}}\"; grep \"average length\" $FILE; done) > {output.read_length}

        Rscript code/histogram_indv.R {input.gencov} {input.het} {output.read_length} {output.gencov_het} with-synteny {params.chromosomes} {params.hetero} {params.homo}
        """

##########################################################
################ STATISTICAL CALCULATIONS ################
##########################################################

rule calculate_heterozygosity:
    input:
        MATCHDIR + SPECIES + "." + SYNTENY_SPECIES +".heterozygosity.bestMatch.small.sexAverage.bed"
    output:
        Mb = RESULTDIR + SPECIES + "{synteny}diffHeterozygosity.1Mbp.out",
        kb = RESULTDIR + SPECIES + "{synteny}diffHeterozygosity.100kbp.out",
        chr = RESULTDIR + SPECIES + "{synteny}diffHeterozygosity.chr.out"
    threads: 1
    shell:
        """
        Rscript code/calculate_windows.R {input} {output.Mb} {output.kb} {output.chr} 
        """

rule calculate_ratio:
    input:
        MATCHDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.nodup.nm.{ED}.norm.sexAverage.small.out"
    output:
        Mb = RESULTDIR + SPECIES + "{synteny}gencov.nodup.nm.{ED}.1Mbp.out",
        kb = RESULTDIR + SPECIES + "{synteny}gencov.nodup.nm.{ED}.100kbp.out",
        chr = RESULTDIR + SPECIES + "{synteny}gencov.nodup.nm.{ED}.chr.out"
    threads: 1
    shell:
        """
        Rscript code/calculate_windows.R {input} {output.Mb} {output.kb} {output.chr} 
        """
